{"version":3,"sources":["app/images/WechatIMG303.png","app/components/NavButton.tsx","app/components/AppBar.tsx","app/pages/collections/styled.tsx","app/components/Card.tsx","app/pages/collections/Collections.tsx","App.tsx","serviceWorker.ts","app/utils/bootstrap.tsx","index.tsx"],"names":["module","exports","__webpack_require__","p","withTheme","props","label","to","activeOnlyWhenExact","theme","StyledButton","styled","Button","withConfig","displayName","componentId","palette","primary","main","react_default","a","createElement","Route","path","exact","children","_ref","match","history","onClick","push","className","createMuiTheme","typography","useNextVariants","styles","makeStyles","console","log","root","flexGrow","grow","menuButton","marginLeft","marginRight","uppercase","textTransform","spaceBetween","justifyContent","activeBtn","fontSize","ButtonAppBar","classes","NoSsr_default","styled_components_browser_esm","AppBar_default","color","position","Toolbar_default","Typography_default","variant","components_NavButton","CollectionsWrap","div","CollectionCard","this","core_index_es","card","CardActionArea_default","CardMedia_default","media","image","title","CardContent_default","gutterBottom","component","CardActions_default","Button_default","size","Component","withStyles","maxWidth","height","Collections","map","Card","App","BrowserRouter","components_AppBar","Boolean","window","location","hostname","install","process","secondary","ReactDOM","render","index_es","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2a1ce896.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/WechatIMG303.87e4123a.png\";","import React from 'react'\nimport Button from '@material-ui/core/Button'\nimport { Link, Route } from 'react-router-dom'\nimport styled from 'styled-components'\nimport { withTheme } from '@material-ui/styles';\n\nconst NavButton = (props: {\n  label: string,\n  to: string,\n  activeOnlyWhenExact?: boolean,\n  theme: any\n}) => {\n  const { label, to, activeOnlyWhenExact, theme } = props\n  const StyledButton = styled(Button)`\n    color: ${() => theme.palette.primary.main};\n    &&.active {\n      font-size: 18px;\n      font-weight: 600;\n    }\n  `\n  return (\n    <Route\n      path={to}\n      exact={activeOnlyWhenExact}\n      children={({ match, history }) => {\n        return (\n          <StyledButton onClick={() => history.push(to)} className={match ? \"active\" : \"\"}>\n            {/* <Link to={to}>{label}</Link> */}\n            {label}\n          </StyledButton>\n        )\n      }}\n    />\n  )\n}\n\nexport default withTheme()(NavButton)","import React from 'react'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Typography from '@material-ui/core/Typography'\nimport NavButton from './NavButton';\nimport { makeStyles } from '@material-ui/styles';\nimport { ThemeProvider } from 'styled-components';\nimport NoSsr from '@material-ui/core/NoSsr';\nimport { createMuiTheme } from '@material-ui/core'\n// import { unstable_Box as Box } from '@material-ui/core/Box';\n\nconst theme = createMuiTheme({\n  typography: {\n    useNextVariants: true,\n  },\n})\n\nconst styles = makeStyles((theme) => {\n  console.log(theme);\n  return ({\n    root: {\n      flexGrow: 1,\n    },\n    grow: {\n      flexGrow: 1,\n    },\n    menuButton: {\n      marginLeft: -12,\n      marginRight: 20,\n    },\n    uppercase: {\n      textTransform: 'uppercase'\n    },\n    spaceBetween: {\n      justifyContent: 'space-between'\n    },\n    activeBtn: {\n      fontSize: '16px'\n    }\n  })\n})\n\nfunction ButtonAppBar() {\n  const classes = styles()\n  return (\n    <NoSsr>\n      <ThemeProvider theme={theme}>\n        <div className={classes.root}>\n          <AppBar color='default' position=\"static\">\n            <Toolbar className={classes.spaceBetween}>\n              {/* <IconButton className={classes.menuButton} color=\"inherit\" aria-label=\"Menu\">\n            <MenuIcon />\n          </IconButton> */}\n              <Typography variant=\"h6\" color=\"inherit\" className={classes.uppercase}>\n                Whatbook\n          </Typography>\n              <NavButton activeOnlyWhenExact={true} to='/collections' label='藏品' />\n              <NavButton to='/economics' label='经济' />\n\n              <div className={classes.grow}></div>\n            </Toolbar>\n          </AppBar>\n        </div>\n      </ThemeProvider>\n    </NoSsr >\n  )\n}\n\nexport default ButtonAppBar\n","import styled from \"styled-components\";\n\nexport const CollectionsWrap = styled.div`\n  width: 1080px;\n  padding: 100px 0;\n  display: flex;\n  margin: 0 auto;\n`\n\n","import React, { Component } from 'react';\nimport { Card } from '@material-ui/core'\nimport { withStyles, WithStyles } from '@material-ui/core/styles';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport image from '../images/WechatIMG303.png'\nconst styles = {\n  card: {\n    maxWidth: 345,\n  },\n  media: {\n    height: 140,\n  },\n};\n\nexport interface Props extends WithStyles<typeof styles> { }\n\nclass CollectionCard extends Component<Props> {\n  render() {\n    const { classes } = this.props\n\n    return (\n      <Card className={classes.card}>\n        <CardActionArea>\n          <CardMedia\n            className={classes.media}\n            image={image}\n            title='Contemplative Reptile'\n          />\n          <CardContent>\n            <Typography gutterBottom variant='h5' component='h2'>\n              Lizard\n          </Typography>\n            <Typography component='p'>\n              Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging\n              across all continents except Antarctica\n          </Typography>\n          </CardContent>\n        </CardActionArea>\n        <CardActions>\n          <Button size='small' color='primary'>\n            Share\n        </Button>\n          <Button size='small' color='primary'>\n            Learn More\n        </Button>\n        </CardActions>\n      </Card>\n    );\n  }\n}\n\nexport default withStyles(styles)(CollectionCard)\n","import React, { Component } from 'react'\nimport { CollectionsWrap } from './styled';\nimport CollectionCard from '../../components/Card';\n\nexport default class Collections extends Component {\n  render() {\n    return (\n      <div>\n        <CollectionsWrap>\n          {[1, 2, 3].map(() => {\n            return <CollectionCard />\n          })}\n        </CollectionsWrap>\n\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport './config.js'\nimport { CssBaseline } from '@material-ui/core'\nimport AppBar from './app/components/AppBar';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\"\nimport Collections from './app/pages/collections/Collections'\n\nexport default class App extends Component {\n  render() {\n    return (\n      <Router>\n        <div>\n          <CssBaseline />\n          <AppBar />\n\n          {/* <Summary /> */}\n          <Route path=\"/collections\" component={Collections} />\n        </div>\n      </Router>\n\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { install } from '@material-ui/styles'\n\ninstall()\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { createMuiTheme } from '@material-ui/core/styles'\nimport { ThemeProvider } from '@material-ui/styles'\nimport purple from '@material-ui/core/colors/purple'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport 'app/utils/bootstrap'\n\nconsole.log('这里', process.env)\nconst theme = createMuiTheme({\n  palette: {\n    primary: { main: '#5A2666' }, // Purple and green play nicely together.\n    secondary: { main: '#11cb5f' }, // This is just green.A700 as hex.\n  },\n  typography: { useNextVariants: true },\n})\nconsole.log(theme)\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    <App />\n  </ThemeProvider>, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}